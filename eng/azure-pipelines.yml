trigger:
  batch: true
  branches:
    include:
    - dotnet/main

pr:
  branches:
    include:
    - dotnet/main

variables:
- template: /eng/common-variables.yml
- template: /eng/common/templates/variables/pool-providers.yml

stages:
- stage: build
  displayName: Build
  jobs:
  - template: /eng/common/templates/jobs/jobs.yml
    parameters:
      enablePublishBuildArtifacts: true
      enablePublishBuildAssets: true
      enablePublishUsingPipelines: true
      jobs:

      ############ LINUX BUILD ############
      - job: Build_Linux
        displayName: Linux
        timeoutInMinutes: 480
        variables:
        - _BuildConfig: Release
        strategy:
          matrix:
            x64:
              assetManifestOS: linux
              assetManifestPlatform: x64
              imagename: mcr.microsoft.com/dotnet-buildtools/prereqs:centos-7
              archflag: --arch x64
            arm64:
              assetManifestOS: linux
              assetManifestPlatform: arm64
              imagename: mcr.microsoft.com/dotnet-buildtools/prereqs:centos-7
              archflag: --arch arm64
        pool:
          ${{ if eq(variables['System.TeamProject'], 'public') }}:
            name: $(DncEngPublicBuildPool)
            demands: ImageOverride -equals build.ubuntu.2204.amd64.open
          ${{ if eq(variables['System.TeamProject'], 'internal') }}:
            name: $(DncEngInternalBuildPool)
            demands: ImageOverride -equals build.ubuntu.2204.amd64
        container:
          image: $(imagename)
        steps:
        - script: |
            git clean -ffdx
            git reset --hard HEAD
            git submodule update --init
            git submodule foreach git clean -ffdx
          displayName: 'Clean up working directory and check out submodules'

        - bash: |
            ./build.sh --ci --restore --build --pack $(archflag) --configuration $(_BuildConfig) /p:RestoreUsingNuGetTargets=false /p:PackageRID=$(assetManifestOS)-$(assetManifestPlatform)
          displayName: 'Build and package'

        - publish: artifacts/packages
          artifact: Packages_Linux_$(assetManifestPlatform)

      # Only run in case of in-build signing
      - ${{ if and(ne(variables['System.TeamProject'], 'public'), ne(variables['Build.Reason'], 'PullRequest'), ne(variables['PostBuildSign'], 'true')) }}:
        - job: Sign_Linux
          dependsOn: Build_Linux
          displayName: Sign Linux_x64
          timeoutInMinutes: 30
          pool:
            name: $(DncEngInternalBuildPool)
            demands: ImageOverride -equals windows.vs2022.amd64
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: Packages_Linux_x64
              path: 'artifacts/packages'

          - powershell: |
              ./eng/common/build.ps1 -ci -configuration $(_BuildConfig) -restore -sign -publish /p:PackageRID=linux-x64 /p:AssetManifestOS=linux /p:PlatformName=x64 $(_InternalBuildArgs)
            displayName: Sign and Publish
        
        - job: Sign_Linux
          dependsOn: Build_Linux
          displayName: Sign Linux_arm64
          timeoutInMinutes: 30
          pool:
            name: $(DncEngInternalBuildPool)
            demands: ImageOverride -equals windows.vs2022.amd64
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: Packages_Linux_arm64
              path: 'artifacts/packages'

          - powershell: |
              ./eng/common/build.ps1 -ci -configuration $(_BuildConfig) -restore -sign -publish /p:PackageRID=linux-arm64 /p:AssetManifestOS=linux /p:PlatformName=x64 $(_InternalBuildArgs)
            displayName: Sign and Publish

      ############ MACOS BUILD ############
      - job: Build_macOS
        displayName: macOS
        timeoutInMinutes: 480
        variables:
        - _BuildConfig: Release
        strategy:
          matrix:
            x64:
              assetManifestOS: osx
              assetManifestPlatform: x64
              archflag: --arch x64
            arm64:
              assetManifestOS: osx
              assetManifestPlatform: arm64
              archflag: --arch arm64
        pool:
          vmImage: macos-11
        steps:
        - script: |
            git clean -ffdx
            git reset --hard HEAD
            git submodule update --init
            git submodule foreach git clean -ffdx
          displayName: 'Clean up working directory and check out submodules'

        - bash: |
            ./build.sh --ci --restore --build --pack $(archflag) --configuration $(_BuildConfig) /p:RestoreUsingNuGetTargets=false /p:PackageRID=$(assetManifestOS)-$(assetManifestPlatform)
          displayName: 'Build and package'

        - publish: artifacts/packages
          artifact: Packages_macOS_$(assetManifestPlatform)

      # Only run in case of in-build signing
      - ${{ if and(ne(variables['System.TeamProject'], 'public'), ne(variables['Build.Reason'], 'PullRequest'), ne(variables['PostBuildSign'], 'true')) }}:
        - job: Sign_macOS
          dependsOn: Build_macOS
          displayName: Sign macOS_x64
          timeoutInMinutes: 30
          pool:
            name: $(DncEngInternalBuildPool)
            demands: ImageOverride -equals windows.vs2022.amd64
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: Packages_macOS_x64
              path: 'artifacts/packages'

          - powershell: |
              ./eng/common/build.ps1 -ci -configuration $(_BuildConfig) -restore -sign -publish /p:PackageRID=osx-x64 /p:AssetManifestOS=osx /p:PlatformName=x64 $(_InternalBuildArgs)
            displayName: Sign and Publish

        - job: Sign_macOS
          dependsOn: Build_macOS
          displayName: Sign macOS_arm64
          timeoutInMinutes: 30
          pool:
            name: $(DncEngInternalBuildPool)
            demands: ImageOverride -equals windows.vs2022.amd64
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: Packages_macOS_arm64
              path: 'artifacts/packages'

          - powershell: |
              ./eng/common/build.ps1 -ci -configuration $(_BuildConfig) -restore -sign -publish /p:PackageRID=osx-arm64 /p:AssetManifestOS=osx /p:PlatformName=x64 $(_InternalBuildArgs)
            displayName: Sign and Publish


      ############ WINDOWS BUILD ############
      - job: Build_Windows
        displayName: Windows
        timeoutInMinutes: 480
        variables:
        - _BuildConfig: Release
        strategy:
          matrix:
            x64:
              assetManifestOS: win
              assetManifestPlatform: x64
              archflag: -arch x64
            arm64:
              assetManifestOS: win
              assetManifestPlatform: arm64
              archflag: -arch arm64
        pool:
          ${{ if eq(variables['System.TeamProject'], 'public') }}:
            name: $(DncEngPublicBuildPool)
            demands: ImageOverride -equals 1es-windows-2022-open
          ${{ if eq(variables['System.TeamProject'], 'internal') }}:
            name: $(DncEngInternalBuildPool)
            demands: ImageOverride -equals 1es-windows-2022
        steps:
        - script: |
            git clean -ffdx
            git reset --hard HEAD
            git submodule update --init
            git submodule foreach git clean -ffdx
          displayName: 'Clean up working directory and check out submodules'

        - powershell: |
            C:\msys64\usr\bin\bash -lc ' '
            C:\msys64\usr\bin\bash -lc 'pacman --noconfirm -Syuu'
            C:\msys64\usr\bin\bash -lc 'pacman --noconfirm -S msys/make msys/ninja msys/cmake msys/diffutils'
          displayName: Install MSYS2 packages (GNU Make and related)

        - powershell: eng\build.ps1 -ci -restore -build -sign -publish -pack $(archflag) -configuration $(_BuildConfig) /p:MsysDir=c:\msys64 /p:RestoreUsingNuGetTargets=false /p:PackageRID=$(assetManifestOS)-$(assetManifestPlatform) /p:workloadPackagesPath=$(Build.SourcesDirectory)\artifacts\packages\$(_BuildConfig)\Shipping
          displayName: 'Build and package'

        - publish: artifacts/packages
          artifact: Packages_Windows_$(assetManifestPlatform)

############ POST BUILD ARCADE LOGIC ############
- ${{ if and(ne(variables['System.TeamProject'], 'public'), ne(variables['Build.Reason'], 'PullRequest')) }}:
  - template: /eng/common/templates/post-build/post-build.yml
    parameters:
      publishingInfraVersion: 3
      enableSourceLinkValidation: false
      enableSigningValidation: false
      enableSymbolValidation: false
      enableNugetValidation: true
